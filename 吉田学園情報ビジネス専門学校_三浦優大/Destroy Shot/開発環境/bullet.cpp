//=============================================================================
//
// バレット処理 [bullet.cpp]
// Author : Miura　Yudai
//
//=============================================================================

//=============================================================================
//インクルード読み込み
//=============================================================================
#include "bullet.h"
#include "manager.h"
#include "scene3D.h"
#include "effect.h"
#include "particle.h"
#include "passerby.h"
#include "animation.h"
#include "renderer.h"
#include "game.h"

//=============================================================================
//静的メンバ変数宣言
//=============================================================================
LPDIRECT3DTEXTURE9 CBullet::m_pTexture = NULL; //テクスチャ用メンバ変数
D3DXVECTOR3 CBullet::m_getpos;                 //位置情報受け渡し用        

//=============================================================================
// コンストラクタ
//=============================================================================
CBullet::CBullet(int nPriority, int nType)
{
}

//=============================================================================
// デストラクタ
//=============================================================================
CBullet::~CBullet()
{

}

//=============================================================================
// 引数から変数に代入する
//=============================================================================
void CBullet::SetBullet(D3DXVECTOR3 pos, D3DXVECTOR3 move, int nLife)
{
	//位置情報
	m_pos = pos;

	//移動量情報
	m_move = move;

	//寿命情報
	m_nLife = nLife;
}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CBullet::Init(D3DXVECTOR3 pos, D3DXVECTOR3 move, int nLife, float fHight, float fWidth)
{
	//タイプ分け処理
	CScene::SetObjType(OBJTYPE_BULLET);

	//セット処理
	SetBullet(pos, move, nLife);

	//初期化処理
	CScene3D::Init(pos, fHight, fWidth);

	//テクスチャ処理 
	SetTex();

	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void CBullet::Uninit(void)
{
	//オブジェクトの破棄
	CScene3D::Uninit();
}

//=============================================================================
// 更新処理
//=============================================================================
void CBullet::Update(void)
{
	//エフェクト生成
	CEffect::Create(m_pos, D3DXCOLOR(0.3f, 0.3f, 1.0f, 1.0f), 15, 40.0f, 40.0f);
	//エフェクト生成
	CEffect::Create(m_pos, D3DXCOLOR(0.3f, 0.3f, 1.0f, 1.0f), 15, 40.0f, 40.0f);

	//パーティクル発生
	CGame::GameParticle(m_pos, 2);

	//位置情報
	m_posold = m_pos;
	m_getpos = m_pos;

	//位置更新
	m_pos += m_move;

	//ライフ処理
	m_nLife--;
	if (m_nLife == 0)//寿命が0になったら
	{
		//消去処理
		Uninit();

		//パーティクル発生
		CGame::GameParticle(m_pos, 0);
	}

	//位置更新の関数呼び出し
	SetPosition(m_pos);
}

//=============================================================================
// 描画処理
//=============================================================================
void CBullet::Draw(void)
{
	//描画処理
	CScene3D::Draw();
}

//=============================================================================
// 生成処理
//=============================================================================
CBullet * CBullet::Create(D3DXVECTOR3 pos, D3DXVECTOR3 move, int nLife)
{
	//モデルを生成
	CBullet *pBullet = NULL;
	pBullet = new CBullet;

	//NULLチェック
	if (pBullet != NULL)
	{
		//オブジェクトの初期化処理
		pBullet->Init(pos, move, nLife, 20.0f, 20.0f);

		//テクスチャ処理
		pBullet->SetTexture(m_pTexture);
	}

	return pBullet;
}
//=============================================================================
// テクスチャロード処理
//=============================================================================
void CBullet::Load(void)
{
	//デバイスへのポインタ
	LPDIRECT3DDEVICE9 pDevice;

	//デバイスの取得
	pDevice = CManager::GetRenderer()->GetDevice();

	// テクスチャの読み込み
	D3DXCreateTextureFromFile(pDevice, "data/TEXTURE/bullet000.png", &m_pTexture);
}
//=============================================================================
// テクスチャアンロード処理
//=============================================================================
void CBullet::Unload(void)
{
	//テクスチャの開放
	if (m_pTexture != NULL)
	{
		m_pTexture->Release();
		m_pTexture = NULL;
	}
}