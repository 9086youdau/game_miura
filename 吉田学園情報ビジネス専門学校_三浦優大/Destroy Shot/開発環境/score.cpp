//================================================
//
//スコア処理[score.cpp]
// Author; miura yuudai
//
//================================================

//=================================================
//インクルード読み込み
//=================================================
#include "score.h"
#include "number.h"

//=============================================================================
//静的メンバ変数宣言
//=============================================================================
int CScore::m_nScore = NULL;
int CScore::m_nNumber[8] = {};
CNumber *CScore::m_apNumber[8];

//=============================================================================
//コンストラクタ
//=============================================================================
CScore::CScore()
{
}

//=============================================================================
//デストラクタ
//=============================================================================
CScore::~CScore()
{
}

//=============================================================================
//スコアの初期化処理
//=============================================================================
HRESULT CScore::Init(D3DXVECTOR3 pos, float fHight, float fWidth)
{
	//ナンバーのクリエイト生成
	for (int nCnt = 0; nCnt < 8; nCnt++)
	{
		m_apNumber[nCnt] = CNumber::Create(D3DXVECTOR3(pos.x + (nCnt * 50.0f), pos.y, 0.0f), fHight, fWidth);
	}

	return S_OK;
}

//=============================================================================
//スコアの終了処理
//=============================================================================
void CScore::Uninit(void)
{
	for (int nCnt = 0; nCnt < 8; nCnt++)
	{
		//終了処理
		if (m_apNumber[nCnt] != NULL)
		{
			m_apNumber[nCnt]->Uninit();
			delete m_apNumber[nCnt];
		}
	}

	//破棄処理
	Release();
}

//=============================================================================
//スコアの更新処理
//=============================================================================
void CScore::Update(void)
{
	//関数呼び出し
	CalculatioScore();
}

//=============================================================================
//スコアの描画処理
//=============================================================================
void CScore::Draw(void)
{
	for (int nCnt = 0; nCnt < 8; nCnt++)
	{
		m_apNumber[nCnt]->Draw();
	}
}

//=============================================================================
//スコアの設定・作成処理
//==============================================================================
CScore * CScore::Create(D3DXVECTOR3 pos)
{
	//インスタンス生成
	CScore *pScore = NULL;
	pScore = new CScore;

	//初期化呼び出し
	pScore->Init(pos, 30.0f, 20.0f);

	return pScore;
}

//=============================================================================
//スコアのセット処理
//=============================================================================
void CScore::SetScore(int nScore)
{
	//スコア代入
	m_nScore = nScore;

	//関数呼び出し
	CalculatioScore();
}

//=============================================================================
//スコアの足す処理
//=============================================================================
void CScore::AddScore(int nValue)
{
	//引数からプラスする
	m_nScore += nValue;

	//関数呼び出し
	CalculatioScore();
}

//=============================================================================
//スコアの計算処理
//=============================================================================
void CScore::CalculatioScore(void)
{
	m_nNumber[0] = m_nScore % 100000000 / 10000000;
	m_nNumber[1] = m_nScore % 10000000 / 1000000;
	m_nNumber[2] = m_nScore % 1000000 / 100000;
	m_nNumber[3] = m_nScore % 100000 / 10000;
	m_nNumber[4] = m_nScore % 10000 / 1000;
	m_nNumber[5] = m_nScore % 1000 / 100;
	m_nNumber[6] = m_nScore % 100 / 10;
	m_nNumber[7] = m_nScore % 10 / 1;

	for (int nCnt = 0; nCnt < 8; nCnt++)
	{
		m_apNumber[nCnt]->SetNumber(m_nNumber[nCnt]);
	}
}

