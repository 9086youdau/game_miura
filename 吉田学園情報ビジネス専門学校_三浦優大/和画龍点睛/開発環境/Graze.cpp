//================================================
//
//グレイズ処理[Graze.cpp]
// Author; miura yuudai
//
//================================================

//=================================================
//インクルード読み込み
//=================================================
#include "Graze.h"
#include "number.h"

//=============================================================================
//静的メンバ変数宣言
//=============================================================================
int CGraze::m_nGraze = NULL;
int CGraze::m_nNumber[3] = {};
CNumber *CGraze::m_apNumber[3];

//=============================================================================
//コンストラクタ
//=============================================================================
CGraze::CGraze(int nPriority) : CScene(nPriority)
{
}

//=============================================================================
//デストラクタ
//=============================================================================
CGraze::~CGraze()
{
}

//=============================================================================
//スコアの初期化処理
//=============================================================================
HRESULT CGraze::Init(D3DXVECTOR3 pos, float fHight, float fWidth)
{
	return S_OK;
}

//=============================================================================
//スコアの終了処理
//=============================================================================
void CGraze::Uninit(void)
{
	for (int nCnt = 0; nCnt < 3; nCnt++)
	{
		//終了処理
		if (m_apNumber[nCnt] != NULL)
		{
			m_apNumber[nCnt]->Uninit();
			delete m_apNumber[nCnt];
		}
	}

	//廃棄処理
	Release();
}

//=============================================================================
//スコアの更新処理
//=============================================================================
void CGraze::Update(void)
{
	CalculatioGraze();
}

//=============================================================================
//スコアの描画処理
//=============================================================================
void CGraze::Draw(void)
{
	m_apNumber[2]->Draw();

	if (m_nGraze > 9)
	{
		m_apNumber[1]->Draw();
	}

	if (m_nGraze > 99)
	{
		m_apNumber[0]->Draw();
	}
}

//=============================================================================
//スコアの設定・作成処理
//=============================================================================
CGraze * CGraze::Create(float posX, float posY, float fHight, float fWidth)
{
	//インスタンス生成
	CGraze *pGraze = NULL;
	pGraze = new CGraze;

	//ナンバーのクリエイト生成
	for (int nCnt = 0; nCnt < 3; nCnt++)
	{
		m_apNumber[nCnt] = CNumber::Create(D3DXVECTOR3(posX + (nCnt * 35.0f), posY, 0.0f), fHight, fWidth,CNumber::NUMBERTYPE_GAME);
	}

	//初期化呼び出し
	pGraze->Init(D3DXVECTOR3(0.0f, 0.0f, 0.0f), 0.0f, 0.0f);

	return pGraze;
}

//=============================================================================
//スコアのセット処理
//=============================================================================
void CGraze::SetGraze(int nScore)
{
	m_nGraze = nScore;

	//関数呼び出し
	CalculatioGraze();
}

//=============================================================================
//スコアの足す処理
//=============================================================================
void CGraze::AddGraze(int nValue)
{
	//引数からプラスする
	m_nGraze += nValue;

	//関数呼び出し
	CalculatioGraze();
}

//=============================================================================
//スコアの減らす処理
//=============================================================================
void CGraze::CalculatioGraze(int nValue)
{
	//引数からプラスする
	m_nGraze = nValue;
}

//=============================================================================
//スコアの計算処理
//=============================================================================
void CGraze::CalculatioGraze(void)
{
	m_nNumber[0] = m_nGraze % 1000 / 100;
	m_nNumber[1] = m_nGraze % 100 / 10;
	m_nNumber[2] = m_nGraze % 10 / 1;

	for (int nCnt = 0; nCnt < 3; nCnt++)
	{
		m_apNumber[nCnt]->SetNumber(m_nNumber[nCnt]);
	}
}