//=============================================================================
//
// 爆発処理[explosion.cpp]
// Author; miura yuudai
//
//=============================================================================

//=============================================================================
//インクルード読み込み
//=============================================================================
#include "explosion.h"
#include "manager.h"
#include "Renderer.h"

//=============================================================================
//静的メンバ変数宣言
//=============================================================================
LPDIRECT3DTEXTURE9 CExplosion::m_pTexture = NULL;

//=============================================================================
//コンストラクタ
//=============================================================================
CExplosion::CExplosion()
{
	//メンバ変数の初期化
	//パターンの初期化
	m_nPatternAnim = 0;
	//カウンターの初期化
	m_nCounterAnim = 0;
}

//=============================================================================
//デストラクタ
//=============================================================================
CExplosion::~CExplosion()
{

}

//=============================================================================
//爆発の設定・更新処理
//=============================================================================
CExplosion * CExplosion::Create(D3DXVECTOR3 pos)
{
	//インスタンス生成
	CExplosion *pExplosion = NULL;
	pExplosion = new CExplosion;

	//初期化処理
	pExplosion->Init(pos, MAX_EXPLOSION_SIZE, MAX_EXPLOSION_SIZE);

	//テクスチャの割り当て
	pExplosion->BindTexture(m_pTexture);

	return pExplosion;
}

//=============================================================================
//爆発の初期化処理
//=============================================================================
HRESULT CExplosion::Init(D3DXVECTOR3 pos, float fHight, float fWidth)
{
	//基本クラスの初期化呼び出し
	CScene2D::Init(pos, fHight, fWidth);

	//テクスチャ設定
	CScene2D::SetTex(MAX_EXPLOSION_TEXTURE,m_nPatternAnim);

	return S_OK;
}

//=============================================================================
//爆発の終了処理
//=============================================================================
void CExplosion::Uninit(void)
{
	//基本クラスの終了呼び出し
	CScene2D::Uninit();
}

//=============================================================================
//爆発の更新処理
//=============================================================================
void CExplosion::Update(void)
{
	//ローカル宣言
	D3DXVECTOR3 pos;
	pos = GetPosition();

	//カウントアップ
	m_nCounterAnim++;

	if ((m_nCounterAnim % 4) == 0)
	{
		//アニーメーション動かす
		m_nPatternAnim++;

		//関数呼び出し
		SetTex(MAX_EXPLOSION_TEXTURE,m_nPatternAnim);

		//弾の位置更新
		SetPosition(pos,D3DXVECTOR3(0.0f, 0.0f, 0.0f));

		//アニメーションパターンが来たら消す
		if (m_nPatternAnim > 8)
		{
			//終了関数
			Uninit();
		}
	}
}
//=============================================================================
//爆発の描画処理
//=============================================================================
void CExplosion::Draw(void)
{
	//基本クラスの描画呼び出し
	CScene2D::Draw();
}

//=============================================================================
//爆発のテクスチャ処理
//=============================================================================
HRESULT CExplosion::Load(void)
{
	// 頂点情報を設定
	LPDIRECT3DDEVICE9 pDevice;

	//デバイスの取得
	pDevice = CManager::GetRenderer()->GetDevice();

	//テキスチャの読み込み
	D3DXCreateTextureFromFile(pDevice, "data/TEXTURE/explosion000.png", &m_pTexture);

	return S_OK;
}

//=============================================================================
//爆発のテクスチャの廃棄処理
//=============================================================================
void CExplosion::Unload(void)
{
	//テクスチャの開放
	if (m_pTexture != NULL)
	{
		m_pTexture->Release();
		m_pTexture = NULL;
	}
}

